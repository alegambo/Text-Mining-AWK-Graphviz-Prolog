###############################################################
#   Universidad Nacional de Costa Rica
#   Curso EIF-400  Paradigmas de Pogramación
#   Profesor: Dr. Carlos Loría-Sáenz
#
#   Grupo 05-1pm.
#   1) Nombre: Juan Alfonso Miranda Bonilla ID: 111950373 
#        correo: juan.miranda.hr9@gmail.com HORARIO: 1pm
#   2) Nombre: Marco Trigueros Soto ID: 402270078 
#        correo: mrctrgrst@gmail.com  HORARIO: 1pm
#   3) Nombre:  Alejandro Gamboa Barahona  ID: 115790444 
#        correo: alegamboaba.17@gmail.com  HORARIO: 10am
#   4) Nombre David Morales Hidalgo  ID: 116300616 
#        correo: davmohi@gmail.com HORARIO: 10am
##############################################################
BEGIN {
	print "%%%%% Study Plan %%%%%";
	print ":- discontiguous curso/1.";
	print ":- discontiguous curso/8.";
	print ":- discontiguous requisito/2.";
}
# Expected input record format generated by compose
# nn::code::description::credits[2345](::req)*::(bsc|dipl)::(level|_)::(cycle|_)
# req ~ EI(F|G)...O? | LIX...
# Regla para todos los records (lines)
{
	if(NF>1){#si  la linea no está vacía
		print "% --- '" $2 "' ---";
		print "curso('" $2 "').";
		linea= "curso('" $2 "'";
		linea=linea "," $1;
		if($2~ /Optativa/)
			linea=linea ",generic";
		else if(length($2)>6)
			linea=linea ",optional";
		else
			linea=linea ",regular";
		linea=linea "," $(NF-2);
		linea=linea "," $4;
		linea=linea "," decimal($(NF-1));
		linea=linea "," decimal($(NF));
		linea=linea ",'" $3 "'"
		linea= linea ").";
		print linea;
		for(i=5;$i ~ /^EIF|^EIG|^MA|^LIX|^Admission/;i++){
			print "requisito('" $2 "','"$i"')."
		}
	}
}
function decimal(n){ # pasa a numero decimal
	switch(n){
		case "I":
			return 1
			break;
		case "II":
			return 2
			break;
		case "III":
			return 3
			break;
		case "IV":
			return 4
			break;
		default:
			return "none"
			break;
	}	
}

END{
print "%%%%% Reglas %%%%%";
print "hoja(L):-findall(X,(curso(X),not(requisito(_,X))),L).";
print "list_lenght([],0).";
print "list_lenght([_|A] , B ) :- list_lenght(A,C) ,B is C+1.";
print "muestraycuentaHojas(F,Y):-hoja(F),list_lenght(F,Y).";
print "requisitosTodos(X,Y):- requisito(X,Y).";
print "requisitosTodos(X,Y):-requisito(X,Z),requisitosTodos(Z,Y).";
print "requisitos(X,L):-findall((Y,Z,S),(curso(X),requisitosTodos(X,Y),curso(Y,_,_,_,_,A,B,Z),atom_concat(A,'_',D),atom_concat(D,B,S)),L).";
}
